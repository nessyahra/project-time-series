# -*- coding: utf-8 -*-
"""Proyek Time Series ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XqQoqzjSQrr0cfLrfmPn1L1ZDd7Sf9b4

# **Proyek Machine Learning dengan Time Series**

*   **Nama:** Venessa Yumadila Syahra
*   **ID Dicoding:** nessasyahra
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

data = pd.read_csv('google stocks.csv')
data.tail()

data['Date'] = pd.to_datetime(data['Date'])
data['Year'] = data['Date'].dt.year

data.head()

data.info()

data = data.drop(columns=['Date', 'Name'])
data.head()

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaler.fit(data)
data_new = scaler.transform(data)
data_new = pd.DataFrame(data_new, columns=data.columns)
data_new.head()

close = data_new['Close'].values
year = data_new['Year'].values

data_new['Close'].plot(figsize=(16,8))

from sklearn.model_selection import train_test_split

x_test, x_train, y_test, y_train = train_test_split(close, year, test_size=0.2, shuffle=False)

print('X train: ', len(x_train))
print('X test: ', len(x_test))
print('Y train: ', len(y_train))
print('Y test: ', len(y_test))

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  series = tf.expand_dims(series, axis=-1)
  ds = tf.data.Dataset.from_tensor_slices(series)
  ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
  ds = ds.flat_map(lambda w: w.batch(window_size + 1))
  ds = ds.shuffle(shuffle_buffer)
  ds = ds.map(lambda w: (w[:1], w[:-1]))
  return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(x_train, window_size=60,
                             batch_size=100, shuffle_buffer=1000)

val_set = windowed_dataset(x_test, window_size=60,
                           batch_size=100, shuffle_buffer=1000)

class ThresholdedMAECallback(tf.keras.callbacks.Callback):
    def __init__(self , threshold):
        super(ThresholdedMAECallback, self).__init__()
        self.threshold = threshold

    def on_epoch_end(self, epoch, logs=None):
        current_mae = logs.get('mae')
        if current_mae < self.threshold:
            print(f"\nMAE kurang dari ({self.threshold}) training berhenti")
            self.model.stop_training = True

threshold_mae = (data_new['Close'].max() - data_new['Close'].min()) * 10/100
print(f'Threshold MAE sebesar {threshold_mae}')
callback_mae = ThresholdedMAECallback(threshold_mae)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv1D(filters=60, kernel_size=5, strides=1,
                           padding='causal', activation='relu', input_shape=[None,1]),
    tf.keras.layers.LSTM(64, return_sequences=True),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.LSTM(32),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(50, activation='relu'),
    tf.keras.layers.Dense(30, activation='relu'),
    tf.keras.layers.Dense(10, activation='relu'),
    tf.keras.layers.Dense(5, activation='relu'),
    tf.keras.layers.Dense(1)
])

model.summary()

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=['mae'])

hist = model.fit(train_set, validation_data=val_set, epochs=100, callbacks=[callback_mae])

"""###Plot"""

plt.plot(hist.history['loss'])
plt.title('Plot Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train'], loc='upper right')
plt.show()
